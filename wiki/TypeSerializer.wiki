#labels CSharp,Fastest,TextSerializer,Compact,Resilient
The fastest and most compact text-based serializer for .NET.

= Introduction =

Included in the Service Stack libraries is *Type Serializer*, a fast, light-weight compact Text Serializer which can be used to serialize any .NET data type including your own custom POCO's and DataContract's.

Out of the box .NET provides a fairly quick but verbose Xml DataContractSerializer or a slightly more compact but slower JsonDataContractSerializer. Both of these options are fragile and likely to break with any significant schema changes. TypeSerializer addresses these shortcomings by being both smaller and significantly faster than the most popular options. It's also more resilient, e.g. a strongly-typed POCO object can be deserialized back into a loosely-typed string Dictionary and vice-versa.

With that in mind, TypeSerializer's main goals are:
  * Fast
  * Compact
  * Human readable and writeable, self-describing text format
  * Resilient to schema changes
  * Non-invasive and configuration-free

These characteristics make it ideal for use anywhere you need to store or transport .NET data-types, e.g. for text blobs in a ORM, data in and out of a key-value store or as the text-protocol in .NET to .NET web services.  

As such, it's utilized within ServiceStack's other components:
  * OrmLite - to store complex types on table models as text blobs in a database field and 
  * [ServiceStackRedis ServiceStack.Redis] - to store rich POCO data types into the very fast [http://code.google.com/p/redis redis] instances.

= Download =
TypeSerializer is included with [http://servicestack.googlecode.com/files/ServiceStack.zip ServiceStack.zip] or available to download separately in a standalone  [http://servicestack.googlecode.com/files/ServiceStack.Text.dll ServiceStack.Text.dll].

----

= Performance =
Type Serializer is actually the fastest and most compact text serializer available for .NET. 
Out of all the serializers benchmarked, it is the only one to remain competitive with [http://code.google.com/p/protobuf-net/ protobuf-net]'s very fast implementation of [http://code.google.com/apis/protocolbuffers/ Protocol Buffers] - google's high-speed binary protocol.

Below is a series of benchmarks serialize the different tables in the [http://code.google.com/p/servicestack/source/browse/trunk/Common/Northwind.Benchmarks/Northwind.Common/DataModel/NorthwindData.cs Northwind database] (3202 records) with the most popular serializers available for .NET:

=== Combined results for serializing / deserialzing a single row of each table in the Northwind database 1,000,000 times ===
_[http://www.servicestack.net/benchmarks/NorthwindDatabaseRowsSerialization.1000000-times.2010-02-06.html view the detailed benchmarks]_

|| Serializer || Size || Peformance ||
|| Microsoft DataContractSerializer || 4.68x || 6.72x ||
|| Microsoft JsonDataContractSerializer|| 2.24x || 10.18x ||
|| Microsoft BinaryFormatter || 5.62x || 9.06x ||
|| NewtonSoft.Json || 2.30x || 8.15x ||
|| ProtoBuf.net || 1x || 1x ||
|| ServiceStack TypeSerializer || 1.78x || 1.92x ||

_number of times larger in size and slower in performance than the best - lower is better_

Microsoft's JavaScriptSerializer was also benchmarked but excluded as it was up to 280x times slower - basically don't use it, ever. 

=== Combined results for serializing / deserialzing each entire table in the Northwind database 10,000 times ===
_[http://www.servicestack.net/benchmarks/NorthwindDatabaseTablesSerialization.10000-times.2010-02-06.html view the detailed benchmarks]_

|| Serializer || Size || Peformance ||
|| Microsoft DataContractSerializer || 4.08x || 5.36x ||
|| Microsoft JsonDataContractSerializer|| 3.06x || 11.74x ||
|| Microsoft BinaryFormatter || 1.05x || 5.01x ||
|| NewtonSoft.Json || 3.07x || 10.75x ||
|| ProtoBuf.net || 1x || 1x ||
|| ServiceStack TypeSerializer || 2.19x || 2.91x ||

_number of times larger in size and slower in performance than the best - lower is better_



= JSV Text Format (JSON + CSV) =

Type Serializer uses a hybrid CSV-style escaping + JavaScript-like text-based format that is optimized for both size and speed. I'm naming this JSV-format (i.e. JSON + CSV) 

In many ways it is similar to JavaScript, e.g. any List, Array, Collection of ints, longs, etc are stored in exactly the same way, i.e:
{{{
[1,2,3,4,5]
}}}

Any IDictionary is serialized like JavaScript, i.e:
{{{
{A:1,B:2,C:3,D:4}
}}}

Which also happens to be the same as C# POCO class with the values 

`new MyClass { A=1, B=2, C=3, D=4 }`
{{{
{A:1,B:2,C:3,D:4}
}}}

JSV does not allow white-spaces, which means strings for the most part can be serialized without quotes, e.g: 

`new MyClass { Foo="Bar", Greet="Hello World!"}` is serialized as:
{{{
{Foo:Bar,Greet:Hello World!}
}}}

=== CSV escaping ===

Any string with any of the following characters: `[]{},"`
is escaped using CSV-style escaping where the value is wrapped in double quotes, e.g:

`new MyClass { Name = "Me, Junior" }` is serialized as:
{{{
{Name:"Me, Junior"}
}}}

A value with a double-quote is escaped with another double quote e.g:

`new MyClass { Size = "2\" x 1\"" }` is serialized as:
{{{
{Size:"2"" x 1"""}
}}}
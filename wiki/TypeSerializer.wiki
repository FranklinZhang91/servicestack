#labels CSharp,Fastest,TextSerializer,Compact,Resilient
The fastest and most compact text-based serializer for .NET data-types.

= Introduction =

Included in the ServiceStack.Text namespace is *TypeSerializer*, a fast, light-weight compact Text Serializer which can be used to serialize any .NET data type including your own custom POCO's and DataContract's.

Out of the box .NET provides a fairly quick but verbose Xml DataContractSerializer or a slightly more compact but slower JsonDataContractSerializer. Both of these options are fragile and likely to break with any significant schema changes. TypeSerializer addresses these shortcomings by being both smaller and significantly faster than the most popular options. It's also more resilient, e.g. a strongly-typed POCO object can be deserialized back into a loosely-typed string Dictionary and vice-versa.

With that in mind, TypeSerializer's main goals are:
  * Fast
  * Compact
  * Human readable and writeable, self-describing schema
  * Resilient to schema changes
  * Non-invasive and configuration-free

These characteristics make it ideal for use anywhere you need to store or transport .NET data-types, e.g. for text blobs in a ORM, data in and out of a key-value store or as the text-protocol in .NET to .NET web services.  

As such, it's utilized within ServiceStack's other components:
  * OrmLite uses it to store complex types on table models as text blobs in a database field and 
  * [ServiceStackRedis ServiceStack.Redis] uses it to store rich POCO data types into the very fast [http://code.google.com/p/redis redis] instances.

= Download =
TypeSerializer is included with [http://servicestack.googlecode.com/files/ServiceStack.zip ServiceStack] or available to download separately in a standalone  [http://servicestack.googlecode.com/files/ServiceStack.Text.dll ServiceStack.Text.dll].


= Performance =
TypeSerializer is quick!, it's actually the fastest and most compact text serializer available for .NET. It actually remains competitive with [http://code.google.com/p/protobuf-net/ protobuf-net]'s very fast implementation of [http://code.google.com/apis/protocolbuffers/ Protocol Buffers] - google's very fast binary protocol.

Below is a summary of [benchmarks] to serialize each table in the [http://code.google.com/p/servicestack/source/browse/trunk/Common/Northwind.Benchmarks/Northwind.Common/DataModel/NorthwindData.cs Northwind database] (3202 records) in the most popular serializers available for .NET:

=== Summary results for serializing / deserialzing each table in the [http://code.google.com/p/servicestack/source/browse/trunk/Common/Northwind.Benchmarks/Northwind.Common/DataModel/NorthwindData.cs Northwind database] 1,000 times ===
|| Serializer || Payload size || Serialize/Deserialize Peformance ||
|| Microsoft DataContractSerializer || 4.36x || 6.92x ||
|| Microsoft JsonDataContractSerializer|| 2.12x || 11.55x ||
|| Microsoft BinaryFormatter || 5.29x || 8.97x ||
|| NewtonSoft.Json || 2.18x || 7.60x ||
|| ProtoBuf.net || 1x || 1x ||
|| ServiceStack TypeSerializer || 1.67x || 1.92x ||

_showing number of times larger in size and slower in performance than the best - lower is better_

=== Summary results for serializing / deserialzing the first row of each table in the [http://code.google.com/p/servicestack/source/browse/trunk/Common/Northwind.Benchmarks/Northwind.Common/DataModel/NorthwindData.cs Northwind database] 1,000,000 times ===
|| Serializer || Payload size || Serialize/Deserialize Peformance ||
|| Microsoft DataContractSerializer || 4.36x || 6.92x ||
|| Microsoft JsonDataContractSerializer|| 2.12x || 11.55x ||
|| Microsoft BinaryFormatter || 5.29x || 8.97x ||
|| NewtonSoft.Json || 2.18x || 7.60x ||
|| ProtoBuf.net || 1x || 1x ||
|| ServiceStack TypeSerializer || 1.67x || 1.92x ||

_showing number of times larger in size and slower in performance than the best - lower is better_



= Text Format =
#labels Redis,Csharp,OpenSource
= Open Source .NET/C# Client for Redis =

[http://code.google.com/p/redis/ Redis] is one of the fastest and richest key-value stores to come out from the [http://en.wikipedia.org/wiki/NoSQL NoSQL] movement. It is similar to memcached but the dataset is not volatile, and values can either be strings lists, sets, or ordered sets.

`ServiceStack.Redis` is an Open Source C# Redis client based on [http://twitter.com/migueldeicaza Miguel de Icaza] previous efforts with [http://github.com/migueldeicaza/redis-sharp redis-sharp]. 

The client gives you a choice 3 different API's to use based on your preference:
  * [IRedisNativeClient] - Allows raw byte access to the Redis APIs
  * [IRedisClient] - Provides a friendlier, more descriptive API that lets you store values as strings (UTF8 encoding).
  * [IRedisGenericClient] - Same as [IRedisClient] API except it lets you store values as any type (including C# POCO objects)

= Examples =
Below is a simple example to give you a flavour of what's possible with the client:

_Full source code of this example is [http://code.google.com/p/servicestack/source/browse/trunk/Common/ServiceStack.Redis/ServiceStack.Redis.Tests/ShippersExample.cs viewable online]_

{{{

using (var redisClient = new RedisClient())
{
	var redis = redisClient.CreateGenericClient<Shipper>();
	var currentShippers = redis.Lists["urn:shippers:current"];
	var prospectiveShippers = redis.Lists["urn:shippers:prospective"];

	currentShippers.Add(
		new Shipper {
			Id = redis.GetNextSequence(),
			CompanyName = "Trains R Us",
			DateCreated = DateTime.UtcNow,
			ShipperType = ShipperType.Trains,
			UniqueRef = Guid.NewGuid()
		});

	currentShippers.Add(
		new Shipper {
			Id = redis.GetNextSequence(),
			CompanyName = "Planes R Us",
			DateCreated = DateTime.UtcNow,
			ShipperType = ShipperType.Planes,
			UniqueRef = Guid.NewGuid()
		});

	var lameShipper = new Shipper {
		Id = redis.GetNextSequence(),
		CompanyName = "We do everything!",
		DateCreated = DateTime.UtcNow,
		ShipperType = ShipperType.All,
		UniqueRef = Guid.NewGuid()
	};

	currentShippers.Add(lameShipper);

	Dump("ADDED 3 SHIPPERS:", currentShippers);

	currentShippers.Remove(lameShipper);

	Dump("REMOVED 1:", currentShippers);

	prospectiveShippers.Add(
		new Shipper {
			Id = redis.GetNextSequence(),
			CompanyName = "Trucks R Us",
			DateCreated = DateTime.UtcNow,
			ShipperType = ShipperType.Automobiles,
			UniqueRef = Guid.NewGuid()
		});

	Dump("ADDED A PROSPECTIVE SHIPPER:", prospectiveShippers);

	redis.PopAndPushBetweenLists(prospectiveShippers, currentShippers);

	Dump("CURRENT SHIPPERS AFTER POP n' PUSH:", currentShippers);
	Dump("PROSPECTIVE SHIPPERS AFTER POP n' PUSH:", prospectiveShippers);

	var poppedShipper = redis.PopFromList(currentShippers);
	Dump("POPPED a SHIPPER:", poppedShipper);
	Dump("CURRENT SHIPPERS AFTER POP:", currentShippers);

	//reset sequence and delete all lists
	redis.SetSequence(0);
	redis.Remove(currentShippers, prospectiveShippers);
	Dump("DELETING CURRENT AND PROSPECTIVE SHIPPERS:", currentShippers);
}

/*
== EXAMPLE OUTPUT ==

ADDED 3 SHIPPERS:
Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5
Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06
Id:3,CompanyName:We do everything!,ShipperType:All,DateCreated:2010-01-31T11:53:37.8009371Z,UniqueRef:d0c249bbbaf84da39fc4afde1b34e332

REMOVED 1:
Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5
Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06

ADDED A PROSPECTIVE SHIPPER:
Id:4,CompanyName:Trucks R Us,ShipperType:Automobiles,DateCreated:2010-01-31T11:53:37.8539401Z,UniqueRef:67d7d4947ebc4b0ba5c4d42f5d903bec

CURRENT SHIPPERS AFTER POP n' PUSH:
Id:4,CompanyName:Trucks R Us,ShipperType:Automobiles,DateCreated:2010-01-31T11:53:37.8539401Z,UniqueRef:67d7d4947ebc4b0ba5c4d42f5d903bec
Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5
Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06

PROSPECTIVE SHIPPERS AFTER POP n' PUSH:

POPPED a SHIPPER:
Id:2,CompanyName:Planes R Us,ShipperType:Planes,DateCreated:2010-01-31T11:53:37.799937Z,UniqueRef:e02a73191f4b4e7a9c44eef5b5965d06

CURRENT SHIPPERS AFTER POP:
Id:4,CompanyName:Trucks R Us,ShipperType:Automobiles,DateCreated:2010-01-31T11:53:37.8539401Z,UniqueRef:67d7d4947ebc4b0ba5c4d42f5d903bec
Id:1,CompanyName:Trains R Us,ShipperType:Trains,DateCreated:2010-01-31T11:53:37.7169323Z,UniqueRef:d17c5db0415b44b2ac5da7b6ebd780f5

DELETING CURRENT AND PROSPECTIVE SHIPPERS:

*/
}}}


More examples are available in the [http://code.google.com/p/servicestack/source/browse/#svn/trunk/Common/ServiceStack.Redis/ServiceStack.Redis.Tests Redis test suite]


= Download =

The latest version of `ServiceStack.Redis` is included as part of [http://servicestack.googlecode.com/files/ServiceStack.zip Service Stack].

Alternatively it is available separately as a [http://servicestack.googlecode.com/files/ServiceStack.Redis.dll standalone dll]

The full source code for the client and the examples is available to [http://code.google.com/p/servicestack/source/browse/#svn/trunk/Common/ServiceStack.Redis view online]
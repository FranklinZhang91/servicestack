The [RedisTransaction] interface as used by [ServiceStackRedis ServiceStack's C# Redis Client].

= Introduction =

Redis transaction interface provides useful overloads that let you Queue-up any [IRedisClient] operation within a single transaction. The API provides support for a callback so you also have access to any return values returned as part of the transaction as well.


= Details =

{{{
public interface IRedisTransaction 
	: IDisposable
{
	void QueueCommand(Action<IRedisClient> command);
	void QueueCommand(Action<IRedisClient> command, Action onSuccessCallback);
	void QueueCommand(Action<IRedisClient> command, Action onSuccessCallback, Action<Exception> onErrorCallback);

	void QueueCommand(Func<IRedisClient, int> command);
	void QueueCommand(Func<IRedisClient, int> command, Action<int> onSuccessCallback);
	void QueueCommand(Func<IRedisClient, int> command, Action<int> onSuccessCallback, Action<Exception> onErrorCallback);

	void QueueCommand(Func<IRedisClient, bool> command);
	void QueueCommand(Func<IRedisClient, bool> command, Action<bool> onSuccessCallback);
	void QueueCommand(Func<IRedisClient, bool> command, Action<bool> onSuccessCallback, Action<Exception> onErrorCallback);

	void QueueCommand(Func<IRedisClient, double> command);
	void QueueCommand(Func<IRedisClient, double> command, Action<double> onSuccessCallback);
	void QueueCommand(Func<IRedisClient, double> command, Action<double> onSuccessCallback, Action<Exception> onErrorCallback);

	void QueueCommand(Func<IRedisClient, byte[]> command);
	void QueueCommand(Func<IRedisClient, byte[]> command, Action<byte[]> onSuccessCallback);
	void QueueCommand(Func<IRedisClient, byte[]> command, Action<byte[]> onSuccessCallback, Action<Exception> onErrorCallback);

	void QueueCommand(Func<IRedisClient, string> command);
	void QueueCommand(Func<IRedisClient, string> command, Action<string> onSuccessCallback);
	void QueueCommand(Func<IRedisClient, string> command, Action<string> onSuccessCallback, Action<Exception> onErrorCallback);

	void QueueCommand(Func<IRedisClient, List<string>> command);
	void QueueCommand(Func<IRedisClient, List<string>> command, Action<List<string>> onSuccessCallback);
	void QueueCommand(Func<IRedisClient, List<string>> command, Action<List<string>> onSuccessCallback, Action<Exception> onErrorCallback);

	void Commit();
	void Rollback();
}
}}}